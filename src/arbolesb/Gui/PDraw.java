/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package arbolesb.Gui;

import arbolesb.Nodo;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;

/**
 *
 * @author luisponcedeleon
 */
public class PDraw extends javax.swing.JPanel {

    /**
     * Creates new form PDraw
     */
    public PDraw() {
        initComponents();
        
        this.setSize(WIDTH, WIDTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    
    private int nodeSizeX;
    private int nodeSizeY = 20;
    private int levelGap = 10;
    private int nodeXGap = 5;
    
    @Override
    public void paint(Graphics g){
        super.paint(g);
        revalidate();
        Graphics2D g2 = (Graphics2D) g;
        
        nodeSizeX = Nodo.getN() * 40 * 2;
        int useX = 0;
        if(Nodo.getRaiz()!=null){
            useX = paintSubtree(Nodo.getRaiz(), 10, 10, g2);
        }
        
        if(useX > getSize().width){
            setPreferredSize(new Dimension(useX + nodeXGap*2 +10, getPreferredSize().height));
        }
    }

    private int paintSubtree(Nodo n, int x, int y, Graphics2D g2){
        if(n==null) return 0;
        
        if(n.getHijos()!=null && n.EncontrarCuantosHijos()!=0){
            int posX = x;
            int[] childPos = new int[Nodo.getN()*2 + 2];
            int i = 0;
            for (Nodo cur : n.getHijos()) {
                if(cur!=null){
                    childPos[i] = posX;
                    int subtreeSize = paintSubtree(cur, posX, y + nodeSizeY + levelGap, g2) + nodeXGap;
                    posX += subtreeSize;
                    childPos[i]+=subtreeSize/2 - (nodeSizeX/2);
                    //childPos[i] = (posX - childPos[i])/2;
                } 
                i++;
            }
            posX-=x;
            
            x += ((posX)/2)-(nodeSizeX/2);
            paintNode(n, x, y, g2, childPos);
            
            return posX;
        } else {
            return paintNode(n, x, y, g2);
        }
    }
    
    private int paintNode(Nodo n, int x, int y, Graphics2D g2){
        int sumX = x;
        for (int i = 0; i < Nodo.getN()*2; i++) {
            String str = "" + n.getInfo(i);
            if(i<n.getContInfo()){
                int size = str.length()*10 + 10;
                g2.draw(new Rectangle2D.Double(sumX, y, size, nodeSizeY));
                g2.drawString(" " + str, (float) (sumX + 2), (float) (y + 15));
                sumX+=size;
            } else {
                g2.draw(new Rectangle2D.Double(sumX, y, 20, nodeSizeY));
                sumX+=20;
            }
        }
        
        return nodeSizeX;
    }
    
    private int paintNode(Nodo n, int x, int y, Graphics2D g2, int[] childPos){
        int sumX = x;
        for (int i = 0; i < Nodo.getN()*2; i++) {
            String str = "" + n.getInfo(i);
            
            if(childPos[i]!=0){
                g2.drawLine(sumX, y+nodeSizeY, childPos[i], y+nodeSizeY+levelGap);
                
            }
            //System.out.println(i + " " + childPos[i]);
            if(i<n.getContInfo()){
                int size = str.length()*10 + 10;
                g2.draw(new Rectangle2D.Double(sumX, y, size, nodeSizeY));
                g2.drawString(" " + str, (float) (sumX + 2), (float) (y + 15));
                sumX+=size;
            } else {
                g2.draw(new Rectangle2D.Double(sumX, y, 20, nodeSizeY));
                sumX+=20;
            }
        }
        
        if(childPos[Nodo.getN()*2]!=0){
            g2.drawLine(sumX, y+nodeSizeY, childPos[Nodo.getN()*2], y+nodeSizeY+levelGap);
        }
        
        return nodeSizeX;
    }
}
